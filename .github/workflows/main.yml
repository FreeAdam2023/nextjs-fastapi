name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # Step 1: 代码检查
  code_quality_check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Linter (ESLint for JS/TS projects)
        run: |
          cd src
          pnpm install
          pnpm lint
      - name: Run Code Formatter Check (Prettier or Black for Python)
        run: |
          cd src
          pnpm format-check  # 假设您有配置格式检查命令

  # Step 2: 构建和测试前端
  frontend_test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Build and Test Frontend
        run: |
          cd src
          pnpm install
          pnpm build
          pnpm test

  # Step 3: 构建和测试后端
  backend_test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install pytest
      - name: Run Backend Tests
        run: |
          cd api
          pytest

  # Step 4: 构建 Docker 镜像
  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [frontend_test, backend_test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build Docker Image
        run: |
          docker build -t my-nextjs-docker:latest .
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag my-nextjs-docker:latest my-nextjs-docker/my-nextjs-docker:latest
          docker push my-nextjs-docker/my-nextjs-docker:latest

  # Step 5: 部署到 Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20  # Vercel GitHub Action
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}  # 在 GitHub Secrets 中添加 Vercel Token
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}  # Vercel 组织 ID
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}  # Vercel 项目 ID
          working-directory: ./src  # 如果有特定工作目录
        env:
          VERCEL_ENV: production  # 可选：设置部署环境（production 或 preview）
