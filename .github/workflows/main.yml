name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  code_quality_check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install pnpm
        run: |
          npm install -g pnpm

      - name: Run Frontend Linter (ESLint)
        run: |
          cd src
          pnpm install
          pnpm lint

      - name: Install Python Dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install flake8 black

      - name: Run Backend Linter (Flake8)
        run: |
          cd api
          flake8 .

      - name: Run Backend Formatter Check (Black)
        run: |
          cd api
          black --check .

  frontend_test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Build and Test Frontend
        run: |
          cd src
          pnpm install
          pnpm build
          pnpm test

  backend_test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install pytest
      - name: Run Backend Tests
        run: |
          cd api
          pytest

  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ frontend_test, backend_test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/wordiverse/my-nextjs-docker:latest .
      - name: Push Docker Image to GitHub Container Registry
        run: |
          docker push ghcr.io/wordiverse/my-nextjs-docker:latest

  deploy_to_azure_vm:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.COURSE_VM_PRIVATE_KEY }}" > course-vm_key.pem
          chmod 600 course-vm_key.pem

      - name: Login and Deploy to Azure VM
        run: |
          ssh -i course-vm_key.pem -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ghcr.io/wordiverse/my-nextjs-docker:latest
          docker stop my-nextjs-container || true
          docker rm my-nextjs-container || true
          docker run -d --name my-nextjs-container -p 80:3000 ghcr.io/wordiverse/my-nextjs-docker:latest
          EOF
