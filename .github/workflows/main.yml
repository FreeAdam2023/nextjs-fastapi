name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  code_quality_check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # 安装 pnpm 用于前端项目的依赖管理
      - name: Install pnpm
        run: |
          npm install -g pnpm

      # 前端代码质量检查
      - name: Run Frontend Linter (ESLint)
        run: |
          cd src
          pnpm install
          pnpm lint  # 假设配置了 ESLint 作为代码检查工具

      # 后端代码质量检查
      - name: Install Python Dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install flake8 black  # 安装 flake8 和 black

      - name: Run Backend Linter (Flake8)
        run: |
          cd api
          flake8 .  # 使用 Flake8 进行 Python 代码质量检查

      - name: Run Backend Formatter Check (Black)
        run: |
          cd api
          black .  # 使用 Black 进行代码格式检查

  # Step 2: 构建和测试前端
  frontend_test:
    name: Frontend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Build and Test Frontend
        run: |
          cd src
          pnpm install
          pnpm build
          pnpm test

  # Step 3: 构建和测试后端
  backend_test:
    name: Backend Build and Test
    runs-on: ubuntu-latest
    needs: code_quality_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          cd api
          pip install -r requirements.txt
          pip install pytest
      - name: Run Backend Tests
        run: |
          cd api
          pytest

  # Step 4: 构建 Docker 镜像
  docker_build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ frontend_test, backend_test ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/wordiverse/my-nextjs-docker:latest .
      - name: Push Docker Image to GitHub Container Registry
        run: |
          docker push ghcr.io/wordiverse/my-nextjs-docker:latest

  # Step 5: 部署到 Vercel
  deploy:
    name: Deploy Placeholder
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy Step
        run: echo "This is a placeholder for the deploy step. No actual deployment is happening."
