name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # Step 1: 构建前端和后端
  frontend_build:
    name: Frontend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Build frontend
        run: |
          cd src
          pnpm install
          pnpm build

  backend_build:
    name: Backend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build backend
        run: |
          cd api
          pip install -r requirements.txt
          # Build steps if required, e.g., docker build or other commands

  # Step 2: 前端和后端单元测试（并行执行）
  frontend_test_a:
    name: Frontend Unit Test A
    runs-on: ubuntu-latest
    needs: frontend_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Run Frontend Unit Test A
        run: |
          cd src
          pnpm install
          pnpm test

  frontend_test_b:
    name: Frontend Unit Test B
    runs-on: ubuntu-latest
    needs: frontend_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pnpm
        run: |
          npm install -g pnpm
      - name: Run Frontend Unit Test B
        run: |
          cd src
          pnpm install
          pnpm test

  backend_test_a:
    name: Backend Unit Test A
    runs-on: ubuntu-latest
    needs: backend_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Backend Unit Test A
        run: |
          cd api
          pip install -r requirements.txt
          pytest

  backend_test_b:
    name: Backend Unit Test B
    runs-on: ubuntu-latest
    needs: backend_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Backend Unit Test B
        run: |
          cd api
          pip install -r requirements.txt
          pytest

  # 部署到 Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [ frontend_build, backend_build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20  # Vercel GitHub Action
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}  # 在 GitHub Secrets 中添加 Vercel Token
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}  # Vercel 组织 ID
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}  # Vercel 项目 ID
          working-directory: ./src  # 如果有特定工作目录
        env:
          VERCEL_ENV: production  # 可选：设置部署环境（production 或 preview）
